<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Densest Subgraph on syx的日志</title>
    <link>https://cartershi.github.io/tags/densest-subgraph/</link>
    <description>Recent content in Densest Subgraph on syx的日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Dec 2020 21:40:56 +0800</lastBuildDate><atom:link href="https://cartershi.github.io/tags/densest-subgraph/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The K-clique Densest Subgraph Problem</title>
      <link>https://cartershi.github.io/post/the-k-clique-densest-subgraph-problem/</link>
      <pubDate>Sat, 12 Dec 2020 21:40:56 +0800</pubDate>
      
      <guid>https://cartershi.github.io/post/the-k-clique-densest-subgraph-problem/</guid>
      <description>本文先考虑最密三角形问题，提出它的精确算法、近似算法和mapreduce算法。然后把这些算法拉到k-clique下
三角形最密子图 精确算法 基于网络流的算法过于套路，略
基于supermodular function的方法直接证明$t(S)-\alpha|S|$是supermodular function，接着binary search$\alpha$即可。
$\frac{1}{3}$近似算法 算法：不断的从删除三角形度最小的点。
近似比：考虑最优结果中第一个节点被删除的时刻即可
MapReduce版 算法：每次用图中删除三角形度小于等于$3(1+\epsilon)\tau(S)$的点。
正确性：首先每次必然会删除点，否则double counting三角形个数得到矛盾。接着考虑最优结果中第一个节点被删除的时刻即得近似比。log轮证明依然double counting三角形个数。
k-clique最密子图 trivial</description>
    </item>
    
    <item>
      <title>Efficient Algorithms for Densest Subgraph Discovery on Large Directed Graphs</title>
      <link>https://cartershi.github.io/post/efficient-algorithms-for-densest-subgraph-discovery-on-large-directed-graphs/</link>
      <pubDate>Wed, 25 Nov 2020 16:53:15 +0800</pubDate>
      
      <guid>https://cartershi.github.io/post/efficient-algorithms-for-densest-subgraph-discovery-on-large-directed-graphs/</guid>
      <description>本文有向图找出两个点集S和T使得密度最大（边只计算S到T的）
$\rho=\frac{E(S,T)}{\sqrt{S}\cdot\sqrt{T}}$
现有算法 精确算法来自ICALP09的On Finding Dense Subgraphs。里面的2近似算法不对，精确算法
精确算法 点集复制两遍，称为A和B。从s到A中每个点边权为m，从A到t边权为$m+\frac{g}{\sqrt{a}}$，从s到B中每个点边权为m，从B到t边权为$m+\sqrt{a}g-2d_{G}^{+}(u)$，，B到A在图G中的边对应边权为2。这里的a是一定会被穷举到的$|\frac{S}{T}|$。
证明比较有意思，直接最小割一算完运用被穷举到的$|\frac{S}{T}|$即可得一个更小的割。另外如果有一个密度更小的子图，带入割的公式可得永远不可能变成更小的割。（漂亮的构造和证明）
近似算法 依然穷举$|\frac{S}{T}|$，然后线性去计算。
新精确算法 又来定义core了：[x,y]-core为S中点出度至少为x，T中点入度至少为y。那么[x,y]-core是nested的，还有经典的lemma5.5（这个core分解的核心），这里看起来复杂的值不过是$\frac{E}{2S}$与$\frac{E}{2T}$。这个结论导出了Theorem 5.6。
Core-Exact Theorem 5.6导出了Core-Exact：用目前知道的近似比作为下界，二近似结果的2倍作为上界，二分密度即可，注意这里l保证一定是合法的密度。
DC-Exact 用ICALP的结论，漂亮的分治加速。关键点在于ICALP的结论得到的关于g的公式的分母是关于$a^2$的反比例函数，导致[b,c]区间可以直接跳过。
需要注意的DC-Exact的第6行
新近似算法 经典的最大[x,y]-core有近似比，这里最大的定义是xy最大，易得2近似。关键在于发现[x,y]-core的$xy\le m$，，所以穷举x到$\sqrt{m}$算y，然后穷举y到$\sqrt{m}$算x即可。</description>
    </item>
    
    <item>
      <title>Efficient Algorithms for Densest Subgraph Discovery</title>
      <link>https://cartershi.github.io/post/efficient-algorithms-for-densest-subgraph-discovery/</link>
      <pubDate>Sun, 08 Nov 2020 10:37:29 +0800</pubDate>
      
      <guid>https://cartershi.github.io/post/efficient-algorithms-for-densest-subgraph-discovery/</guid>
      <description>本文处理最密子图问题，它基于$(k,\Psi)-core$，可以处理普通模式，而不局限于clique。
文章用core的部分还不错。
问题定义 EDS为最大边密度子图，CDS为最大团密度子图，PDS为最大模式密度子图。这三者是逐渐包含关系，首先看CDS的方法，最后把它拓展到PDS（这里没意思）。
现有方法 精确算法 参见Scalable Large Near-Clique Detection in Large-Scale
近似算法 每次删除度最大的节点，计算剩余图密度。
CLIQUE-BASED CORES 定义 k-core
定义k-core $H_k$为图G中最大的子图，使得每个点的度至少为k。定义$H_k$的order为k。点v的core number定义为包含点v的$H_k$中的最大order。可以发现$H_k$中所有节点的core number至少为k。
性质：
  k-cores是nested，即order更小的k-core覆盖更大的k-core。
  k-core可以不连通。
  可以线性计算所有点的core number。
  $(k,\Psi)$-core​
仿照k-core的定义，我们给出$(k,\Psi)$-core​ $R_k$的定义：图中的最大子图，使得每个点的clique数至少为k。定义$R_k$的order为k。点v的clique-core number $core_G(v,\Psi)$为包含点v的$R_k$中的最大order。定义最大clique-core number为$k_{max}$。
性质：
  $(k,\Psi)$-core是nested，即order更小的$(k,\Psi)$-core覆盖更大的$(k,\Psi)$-core。
  k-core可以不连通。
  $core_G(v,\Psi)\le deg_G(v,\Psi)$
  $(k,\Psi)$-core的上下界 上界为$k_{max}$：每个点删除都会使得密度变小，所以每个点至少参与$\rho$个clique，这是$k$的定义。
下界为$\frac{k}{|V_{\Psi}|}$：double counting$R_k$中的clique涉及的点数即可。
$(k,\Psi)$-core分解 思想在于迭代的删除图中clique数最小的节点，这个值是当前节点的$core_G(v,\Psi)$，正确性反证一下即可。
注意删除时需要更新相应节点的clique数，做法是计算有它参与的clique数并更新其他点。
拓展 模式可以用与$(k,\Psi)$-core分解一样的算法
CORE-BASED APPROACHES 精确算法 二分的上下界：
借助$(k,\Psi)$-core的上下界，我们可以给出二分的上下界
上界：$(k,\Psi)$-core上界的证明没有用到$(k,\Psi)$-core的定义，可以拿过来用
下界：$\rho_{opt}\ge \max{\rho(R_k,\Psi)}\ge \frac{k_{max}}{|V_\Psi|}$</description>
    </item>
    
    <item>
      <title>Scalable Large Near-Clique Detection in Large-Scale Networks via Sampling</title>
      <link>https://cartershi.github.io/post/scalable-large-near-clique-detection-in-large-scale/</link>
      <pubDate>Wed, 07 Oct 2020 16:27:23 +0800</pubDate>
      
      <guid>https://cartershi.github.io/post/scalable-large-near-clique-detection-in-large-scale/</guid>
      <description>本文处理最密clique子图问题。为了方便描述，下文只考虑常规图，不考虑二部图。
Notation 定义$C_k(G)$为图G中的k-cliques集合，$c_k(G)=c_k=|C_k(G)|$为k-cliques的数目，$f_k(v)$为点v参与的k-cliques的数目，则我们有
$\sum_{v\in V(G)}f_k(v)=kc_k$
Exact Algorithms 方法A 使用网络流定义，定义A为图中的点集， B为$C_{k-1}(G)$。建图方式如下：
1.s到A中的点v建立容量为$f_k(v)$的有向边。2.A中点若能与B中团构成k-clique，则建立容量为1的有向边。3.B中团到A中对应节点建立容量为无限大的有向边。4.A中的点到t建立容量为kD的有向边。
考虑上面网络的最小割，s到其他点的割为$kc_k$，这是割的上界。
定义$A_1=S\cap A,B_1=S\cap B,A_2=T\cap A,B_2=T\cap B$，显然$B_1$对应的点都在$A_1$中，计算124三种割的贡献，第一种为$\sum_{v\in V(A_2)}f_k(v)$，第4种$kD|A_1|$。
用$c_{k}^{(j)}$定义为k-clique中有j个节点在$A_1$中，对于$j=1,\cdots,k-1$，每个在$A_1$中的节点对应的k-1-clique至少有一个节点不在$A_1$中，所以它不在$B_1$中，所以必然对第二种割有1的贡献。
综上，总的割为$\sum_{v\in V(A_2)}f_k(v)+kD|A_1|+\sum_{j=1}^{k-1}jc_k^{(j)}$。
注意到$\sum_{j=1}^{k}jc_k^{(j)}=\sum_{v\in V(A_1)}f_k(v)$，带入上式得$kc_k+kD|A_1|-kc_k^{(k)}$，那么点集$A_1$不为空就能得到一个密度大于D的子图。
由于稀疏图上clique数目较少，列举速度比较快，所以本算法跑的比较快。
方法B 论文里写的有些不对？
Densest Subgraph Sparsifiers 超图的点为原图中的点，边为原图中的k-clique。对这个图上的超边进行sample。
定理4本身比较难构造，关键在于这里的logn。对于任意密度$\ge D$的点集，sample后的密度高概率$\ge (1-\epsilon)C\log{n}$，任意密度$\ge D$的点集，sample后的密度高概率$&amp;lt; (1-\epsilon)C\log{n}$。
不过感觉sample需要D很大判断，没有实际意义
其证明本身比较简单，直接对每个点集的结果进行Chernoff bound求和即可。</description>
    </item>
    
  </channel>
</rss>
